datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
  receipts     Receipt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type         TransactionType
  title        String
  slug         String          @default("")
  emoji        String
  color        String
  transactions Transaction[]
  budget       Budget?
  receipts     Receipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, color])
  @@unique([userId, emoji])
}

model Transaction {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type       TransactionType
  note       String
  date       DateTime
  category   Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  amount     Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type       BudgetType
  category   Category?     @relation(fields: [categoryId], references: [id])
  categoryId String?       @unique
  amount     Decimal
  timeFrame  TimeFrameType
  startDate  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Receipt {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  imageUrl   String    @db.Text
  title      String
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TimeFrameType {
  DAILY
  WEEKLY
  MONTHLY
}

enum BudgetType {
  OVERALL
  CATEGORY
}

enum TransactionType {
  EXPENSE
  INCOME
}
